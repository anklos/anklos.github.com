<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shane Niu's Blog]]></title>
  <link href="http://anklos.github.com/atom.xml" rel="self"/>
  <link href="http://anklos.github.com/"/>
  <updated>2012-10-20T13:05:11+11:00</updated>
  <id>http://anklos.github.com/</id>
  <author>
    <name><![CDATA[Shane Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[multiple db solution]]></title>
    <link href="http://anklos.github.com/blog/2012/10/20/multiple-db-solution/"/>
    <updated>2012-10-20T12:14:00+11:00</updated>
    <id>http://anklos.github.com/blog/2012/10/20/multiple-db-solution</id>
    <content type="html"><![CDATA[<p>Recently I have been working on a big legacy code base which involves several db schemas. For whatever reasons, great ancestor devs didn&#8217;t seperate the test and developement database for the project, instead, just used the same databases and tables. As a young and passionate dev, I know this has to be changed. So I decided to setup multiple databases on my machine for running and testing the project.</p>

<p>First, I came across this idea: just install another mysql (we use mysql) db in the virtual machine and it should work straightforward. I used vagrant to do this. A few gotchas here:</p>

<ul>
<li>in /etc/hosts.allowï¼šadd <code>mysqld: ALL : ALLOW</code> and <code>mysqld-max: ALL : ALLOW</code></li>
<li>in /etc/mysql/my.cnf: comment the line <code>skip-external-locking</code>, and set <code>bind-address</code> to be 0.0.0.0</li>
<li>log into mysql, <code>GRANT ALL ON *.* to 'root'@'%'</code></li>
</ul>


<p>Allright, thats it. But it looks a bit heavy to have a virtual machine running on the backround to just serve as a database.</p>

<p>OK. There should be a smarter way. I did a bit search and found that mysql can have databases in different process and store the data in different folder. That&#8217;s awesome.</p>

<p>To get the idea about the setup config, simply run <code>mysqld_multi --example</code> to get a sample settings, which can be used in /etc/my.cnf. Then initialise the db by doing <code>/mysql/bin/mysql_install_db --datadir=/data/mysql/data1 --user</code>. Now there is a very important step which often mssing from most tutorials is before you want to use mysqld_multi to start a mysql instance, you would better start that instance mannualy <code>mysql.server --basedir --port</code> and run mysql_upgrdate to make sure there is no error in the newly created mysqld[i]. It is quite often to see some issues solved by this upgrade. After that, you can start a new mysqld by <code>mysqld_multi start 2</code>. If it still fails to start mysql, check the error log, which can be set in the my.cnf.</p>

<p>Here is a sample setting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mysqld_multi]
</span><span class='line'>mysqld     = /usr/local/Cellar/mysql/5.5.27/bin/mysqld_safe
</span><span class='line'>mysqladmin = /usr/local/Cellar/mysql/5.5.27/bin/mysqladmin
</span><span class='line'>
</span><span class='line'>[mysqld2]
</span><span class='line'>socket     = /tmp/mysql.sock2
</span><span class='line'>port       = 3307
</span><span class='line'>pid-file   = /usr/local/var/mysql2/mysql.pid2
</span><span class='line'>datadir    = /usr/local/var/mysql2
</span><span class='line'>log-error  = /var/log/mysqld2.log
</span><span class='line'>ft_min_word_len=1
</span><span class='line'>ft_stopword_file = ''
</span><span class='line'>default-storage-engine=InnoDB</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best way to do a find/replace in several files?]]></title>
    <link href="http://anklos.github.com/blog/2012/06/02/best-way-to-do-a-find-slash-replace-in-several-files/"/>
    <updated>2012-06-02T00:05:00+10:00</updated>
    <id>http://anklos.github.com/blog/2012/06/02/best-way-to-do-a-find-slash-replace-in-several-files</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -type f -print0 | xargs -0 -n 1 sed -i -e 's/from/to/g'</span></code></pre></td></tr></table></div></figure>


<p>Be noted that this way would break git index because it will also replace the files in the .git folder. So specify files types before you run it or you run it in the sub-directory instead of root directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[root access http proxy]]></title>
    <link href="http://anklos.github.com/blog/2012/05/13/root-access-http-proxy/"/>
    <updated>2012-05-13T23:55:00+10:00</updated>
    <id>http://anklos.github.com/blog/2012/05/13/root-access-http-proxy</id>
    <content type="html"><![CDATA[<p>Use</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo -E</span></code></pre></td></tr></table></div></figure>


<p> to bypass proxy when needs root access for installation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overwrite messed local branch with remote branch]]></title>
    <link href="http://anklos.github.com/blog/2012/04/24/easy-fix-for-your-messed-git-repository/"/>
    <updated>2012-04-24T23:18:00+10:00</updated>
    <id>http://anklos.github.com/blog/2012/04/24/easy-fix-for-your-messed-git-repository</id>
    <content type="html"><![CDATA[<p>We often meet this situation on using git: we pull down the code from remote branch to a long time not updated repository and find lots of conflicts after merge. The first thought comes up to your mind is probably just overwrite the local branch by the remote one. It is not that straight forward to do this like SVN. Here I would like to introuce a full solution for this issue.</p>

<p>First, if you already pull down the remote branch and have a lot of conflicts in the repository, you could run the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard HEAD</span></code></pre></td></tr></table></div></figure>


<p> to drop off the changes done by last pull.</p>

<p>Second, rename your local branch. For example, if you want to replace your master branch, you could do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch -m master old_master</span></code></pre></td></tr></table></div></figure>


<p>Thirdly, get the remote master to your local master by running command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b master origin/master</span></code></pre></td></tr></table></div></figure>


<p>Now you have the latest code in your master branch. If you want to delete your old master, you can just do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch -D old_master</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it, yeah!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use ctags navigation in mac vim]]></title>
    <link href="http://anklos.github.com/blog/2012/04/12/navigation-in-vim/"/>
    <updated>2012-04-12T18:25:00+10:00</updated>
    <id>http://anklos.github.com/blog/2012/04/12/navigation-in-vim</id>
    <content type="html"><![CDATA[<p>Step1: Type command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ctags</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t install ctags from http://ctags.sourceforge.net/. Reason is this version doesn&#8217;t support ruby. I dont know why is that.. Anway, brew rocks.</p>

<p>Step2: GO to your vimrc file, put one line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set tags=tags;</span></code></pre></td></tr></table></div></figure>


<p>Step3: GO to your project directory and run command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctags -R</span></code></pre></td></tr></table></div></figure>


<p>Done! Now you can go to functin calls and simply type &#8216;ctrl ]&#8217;. Then it will magically jump to the definition.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim: move around]]></title>
    <link href="http://anklos.github.com/blog/2012/03/25/vim-move-around/"/>
    <updated>2012-03-25T00:55:00+11:00</updated>
    <id>http://anklos.github.com/blog/2012/03/25/vim-move-around</id>
    <content type="html"><![CDATA[<p>e: Move to the end of a word.</p>

<p>w: Move forward to the beginning of a word.</p>

<p>b: Move backward to the beginning of a word.</p>

<p>$: Move to the end of the line.</p>

<p>0: Move to the beginning of the line.</p>

<p>^: Move to the first non-blank character of the line.</p>

<p>): Jump forward one sentence.</p>

<p>(: Jump backward one sentence.</p>

<p>}: Jump forward one paragraph.</p>

<p>{: Jump backward one paragraph.</p>

<p>H: Jump to the top of the screen.</p>

<p>M: Jump to the middle of the screen.</p>

<p>L: Jump to the bottom of the screen.</p>

<p>mb &amp; &#8216;b: mark a line and jump to that line</p>

<p>&#8221;: Return to the line where the cursor was before the latest jump.(Two single quotes.)</p>

<p>&#8220;: Return to the cursor position before the latest jump (undo the jump).(Two back ticks. This is above the Tab key on some keyboards.)</p>

<p>%: Jump to corresponding item, e.g. from an open brace to its matching closing brace.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search defined class in the project]]></title>
    <link href="http://anklos.github.com/blog/2012/03/21/search-defined-class-in-the-project/"/>
    <updated>2012-03-21T17:20:00+11:00</updated>
    <id>http://anklos.github.com/blog/2012/03/21/search-defined-class-in-the-project</id>
    <content type="html"><![CDATA[<p>Recently I came across with a problem of searching defined class in the project.</p>

<p>I thought it would be easy to just use <em>defined?(&#8216;klass&#8217;.constantize)</em>
.</p>

<p>However, <em>defined?(kclass)</em> works but <em>defined?(&#8216;klass&#8217;.constantize)</em> doesn&#8217;t.</p>

<p>It is very weired, right? Because <em>kclass</em> is supposed to be equal to <em>&#8216;klass&#8217;.constantize</em>.</p>

<p>I tried to use other methods like get_const. But it will raise name error for checking class inside a module like <em>ModuleA::ModuleB::Klass</em>. No idea.</p>

<p>A simple hack solution:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">present?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="nb">eval</span> <span class="nb">name</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">rescue</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jesus..not good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Successful People are successful?]]></title>
    <link href="http://anklos.github.com/blog/2012/03/11/successful-people-are-successful/"/>
    <updated>2012-03-11T10:29:00+11:00</updated>
    <id>http://anklos.github.com/blog/2012/03/11/successful-people-are-successful</id>
    <content type="html"><![CDATA[<p>This is a Sunday morning. Weather is clear.</p>

<p>I lie on the bed, read one aticle linked from hack news: <a href="http://swombat.com/2012/3/10/successful-people">Successful People are successful</a></p>

<p>This article is trying to say successful people usually have been successful before everybody knows that. Successful people always optimize personal growth for buidling their &#8220;success pool&#8221;.</p>

<p>I cannot agree more.</p>

<p>However, being successful is more than that.<a href="http://news.ycombinator.com/item?id=3688263">One comment on hack news</a> gives a very good point of view. We often ignore that chances play an essential role in everyone&#8217;s success. If Steve Jobs was born in China, he would not create the great Apple. That&#8217;s the simple truth.</p>

<p>I believe <strong>LIFE IS A RANDOM GAME</strong>. You may argue that hard working can change the fate. Yes. But hard working should also be seen as an attribute that is set in your body when you are born, and it is random. So a person is created with random attributes, and he will live with random chances happening around him. That&#8217;s the game of life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set trust to .rvmrc file as default]]></title>
    <link href="http://anklos.github.com/blog/2012/03/05/set-trust-to-rvmrc-file-as-default/"/>
    <updated>2012-03-05T23:02:00+11:00</updated>
    <id>http://anklos.github.com/blog/2012/03/05/set-trust-to-rvmrc-file-as-default</id>
    <content type="html"><![CDATA[<p>If you use .rvmrc in your project to control the ruby version, you have probably seen the below message when you enter the project directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Do you wish to trust this .rvmrc file? (/home/www/apps/current/.rvmrc)
</span><span class='line'>y[es], n[o], v[iew], c[ancel]> n</span></code></pre></td></tr></table></div></figure>


<p>In order to pass this, you could just put one line in /etc/.rvmrc or ~/.rvmrc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm_trust_rvmrcs_flag=1</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redirect your output to console]]></title>
    <link href="http://anklos.github.com/blog/2012/03/03/redirect-your-output-to-console/"/>
    <updated>2012-03-03T23:20:00+11:00</updated>
    <id>http://anklos.github.com/blog/2012/03/03/redirect-your-output-to-console</id>
    <content type="html"><![CDATA[<p>Below are some tricks I learnt from one thread in ruby-china forum.</p>

<p>Redirect log output to console:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">STDOUT</span><span class="p">)</span>
</span><span class='line'><span class="no">ActiveResource</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">STDOUT</span><span class="p">)</span>
</span><span class='line'><span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">STDOUT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also customize the color:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">colorize</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="n">background</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:background</span><span class="o">]</span> <span class="o">||</span> <span class="n">options</span><span class="o">[</span><span class="ss">:bg</span><span class="o">]</span> <span class="o">||</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">style</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:style</span><span class="o">]</span>
</span><span class='line'>    <span class="n">offsets</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;gray&quot;</span><span class="p">,</span><span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="s2">&quot;green&quot;</span><span class="p">,</span> <span class="s2">&quot;yellow&quot;</span><span class="p">,</span> <span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="s2">&quot;magenta&quot;</span><span class="p">,</span> <span class="s2">&quot;cyan&quot;</span><span class="p">,</span><span class="s2">&quot;white&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">styles</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;normal&quot;</span><span class="p">,</span><span class="s2">&quot;bold&quot;</span><span class="p">,</span><span class="s2">&quot;dark&quot;</span><span class="p">,</span><span class="s2">&quot;italic&quot;</span><span class="p">,</span><span class="s2">&quot;underline&quot;</span><span class="p">,</span><span class="s2">&quot;xx&quot;</span><span class="p">,</span><span class="s2">&quot;xx&quot;</span><span class="p">,</span><span class="s2">&quot;underline&quot;</span><span class="p">,</span><span class="s2">&quot;xx&quot;</span><span class="p">,</span><span class="s2">&quot;strikethrough&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="n">background</span> <span class="p">?</span> <span class="mi">40</span> <span class="p">:</span> <span class="mi">30</span>
</span><span class='line'>    <span class="n">color_code</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="p">(</span><span class="n">offsets</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="o">||</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="n">style_code</span> <span class="o">=</span> <span class="n">styles</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">style</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="se">\e</span><span class="s2">[</span><span class="si">#{</span><span class="n">style_code</span><span class="si">}</span><span class="s2">;</span><span class="si">#{</span><span class="n">color_code</span><span class="si">}</span><span class="s2">m</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="se">\e</span><span class="s2">[0m&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[God wins]]></title>
    <link href="http://anklos.github.com/blog/2012/03/01/god-wins/"/>
    <updated>2012-03-01T00:04:00+11:00</updated>
    <id>http://anklos.github.com/blog/2012/03/01/god-wins</id>
    <content type="html"><![CDATA[<p>Assume you will go into two rooms:</p>

<p>Room A: full of latest cool staff like best cars, iphone 5, ipad 3, you name it. Things that contain and represent highest intelligence and creativity of hunman beings.</p>

<p>Room B: A girl, who you would fall in love at first sight.</p>

<p>Which room would give you more inside happiness?</p>

<p>hmmm&#8230;</p>

<p>That&#8217;s why Steve Jobs said his greatest achievement in his life is raise four kids.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[proxy with gem, bundle and git]]></title>
    <link href="http://anklos.github.com/blog/2012/01/04/proxy/"/>
    <updated>2012-01-04T18:18:00+11:00</updated>
    <id>http://anklos.github.com/blog/2012/01/04/proxy</id>
    <content type="html"><![CDATA[<p>You cannot run away with setting proxy in the office, now and then you need to do that.</p>

<p>For git:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config â€”global http.proxy http://user:password@host:port</span></code></pre></td></tr></table></div></figure>


<p>For gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem --http-proxy=http://user:password@host:port</span></code></pre></td></tr></table></div></figure>


<p>For bundle:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export http_proxy=http://user:password@host:port</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
